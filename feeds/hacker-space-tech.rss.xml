<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>HackerSpaceTech</title><link>http://www.hackerspacetech.com/</link><description></description><lastBuildDate>Sat, 12 Nov 2016 00:00:00 -0600</lastBuildDate><item><title>Virtual Color Mixer</title><link>http://www.hackerspacetech.com/virtual-color-mixer.html</link><description>&lt;div class="jumbotron"&gt;

&lt;p&gt;This example demonstrates how to send multiple values from the Arduino board to the computer. The readings from three potentiometers are used to set the red, green, and blue components of the background color of a Processing sketch.&lt;/p&gt;
&lt;h4&gt;Hardware Required&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Arduino or Genuino Board&lt;/li&gt;
&lt;li&gt;3 Analog Sensors (potentiometer, photocell, FSR, etc.)&lt;/li&gt;
&lt;li&gt;3 10K ohm resistors&lt;/li&gt;
&lt;li&gt;hook-up wires&lt;/li&gt;
&lt;li&gt;breadboard&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Software Required&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Processing&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Circuit&lt;/h4&gt;
&lt;p&gt;Connect analog sensors to analog input pins 0, 1, and 2.&lt;/p&gt;
&lt;p&gt;This circuit uses three voltage divider sub-circuits to generate analog voltages from the force-sensing resistors. a voltage divider has two resistors in series, dividing the voltage proportionally to their values.&lt;/p&gt;
&lt;p&gt;&lt;img alt="breadboard" src="https://www.arduino.cc/en/uploads/Tutorial/virtualColorMixer_bb.png" /&gt;&lt;/p&gt;
&lt;h4&gt;Schematic&lt;/h4&gt;
&lt;p&gt;&lt;img alt="circuit" src="https://www.arduino.cc/en/uploads/Tutorial/VCM_schem.png" /&gt;&lt;/p&gt;
&lt;h4&gt;Code&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;  This example reads three analog sensors (potentiometers are easiest)&lt;/span&gt;
&lt;span class="cm"&gt; and sends their values serially. The Processing and Max/MSP programs at the bottom&lt;/span&gt;
&lt;span class="cm"&gt; take those three values and use them to change the background color of the screen.&lt;/span&gt;

&lt;span class="cm"&gt; The circuit:&lt;/span&gt;
&lt;span class="cm"&gt; * potentiometers attached to analog inputs 0, 1, and 2&lt;/span&gt;

&lt;span class="cm"&gt; http://www.arduino.cc/en/Tutorial/VirtualColorMixer&lt;/span&gt;

&lt;span class="cm"&gt; created 2 Dec 2006&lt;/span&gt;
&lt;span class="cm"&gt; by David A. Mellis&lt;/span&gt;
&lt;span class="cm"&gt; modified 30 Aug 2011&lt;/span&gt;
&lt;span class="cm"&gt; by Tom Igoe and Scott Fitzgerald&lt;/span&gt;

&lt;span class="cm"&gt;  This example code is in the public domain.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

const&lt;span class="w"&gt; &lt;/span&gt;int&lt;span class="w"&gt; &lt;/span&gt;redPin&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;A0&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sensor&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;control&lt;span class="w"&gt; &lt;/span&gt;red&lt;span class="w"&gt; &lt;/span&gt;color&lt;span class="w"&gt;&lt;/span&gt;
const&lt;span class="w"&gt; &lt;/span&gt;int&lt;span class="w"&gt; &lt;/span&gt;greenPin&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;A1&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sensor&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;control&lt;span class="w"&gt; &lt;/span&gt;green&lt;span class="w"&gt; &lt;/span&gt;color&lt;span class="w"&gt;&lt;/span&gt;
const&lt;span class="w"&gt; &lt;/span&gt;int&lt;span class="w"&gt; &lt;/span&gt;bluePin&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;A2&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sensor&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;control&lt;span class="w"&gt; &lt;/span&gt;blue&lt;span class="w"&gt; &lt;/span&gt;color&lt;span class="w"&gt;&lt;/span&gt;

void&lt;span class="w"&gt; &lt;/span&gt;setup&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;Serial&lt;span class="o"&gt;.&lt;/span&gt;begin&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9600&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

void&lt;span class="w"&gt; &lt;/span&gt;loop&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;Serial&lt;span class="o"&gt;.&lt;/span&gt;print&lt;span class="o"&gt;(&lt;/span&gt;analogRead&lt;span class="o"&gt;(&lt;/span&gt;redPin&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;Serial&lt;span class="o"&gt;.&lt;/span&gt;print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;Serial&lt;span class="o"&gt;.&lt;/span&gt;print&lt;span class="o"&gt;(&lt;/span&gt;analogRead&lt;span class="o"&gt;(&lt;/span&gt;greenPin&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;Serial&lt;span class="o"&gt;.&lt;/span&gt;print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;Serial&lt;span class="o"&gt;.&lt;/span&gt;println&lt;span class="o"&gt;(&lt;/span&gt;analogRead&lt;span class="o"&gt;(&lt;/span&gt;bluePin&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* Processing code for this example&lt;/span&gt;

&lt;span class="cm"&gt;//  This example code is in the public domain.&lt;/span&gt;

&lt;span class="cm"&gt;import processing.serial.*;&lt;/span&gt;

&lt;span class="cm"&gt;float redValue = 0;        // red value&lt;/span&gt;
&lt;span class="cm"&gt;float greenValue = 0;      // green value&lt;/span&gt;
&lt;span class="cm"&gt;float blueValue = 0;       // blue value&lt;/span&gt;

&lt;span class="cm"&gt;Serial myPort;&lt;/span&gt;

&lt;span class="cm"&gt;void setup() {&lt;/span&gt;
&lt;span class="cm"&gt;  size(200, 200);&lt;/span&gt;

&lt;span class="cm"&gt;  // List all the available serial ports&lt;/span&gt;
&lt;span class="cm"&gt;  // if using Processing 2.1 or later, use Serial.printArray()&lt;/span&gt;
&lt;span class="cm"&gt;  println(Serial.list());&lt;/span&gt;

&lt;span class="cm"&gt;  // I know that the first port in the serial list on my mac&lt;/span&gt;
&lt;span class="cm"&gt;  // is always my  Arduino, so I open Serial.list()[0].&lt;/span&gt;
&lt;span class="cm"&gt;  // Open whatever port is the one you&amp;#39;re using.&lt;/span&gt;
&lt;span class="cm"&gt;  myPort = new Serial(this, Serial.list()[0], 9600);&lt;/span&gt;
&lt;span class="cm"&gt;  // don&amp;#39;t generate a serialEvent() unless you get a newline character:&lt;/span&gt;
&lt;span class="cm"&gt;  myPort.bufferUntil(&amp;#39;\n&amp;#39;);&lt;/span&gt;
&lt;span class="cm"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;void draw() {&lt;/span&gt;
&lt;span class="cm"&gt;  // set the background color with the color values:&lt;/span&gt;
&lt;span class="cm"&gt;  background(redValue, greenValue, blueValue);&lt;/span&gt;
&lt;span class="cm"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;void serialEvent(Serial myPort) {&lt;/span&gt;
&lt;span class="cm"&gt;  // get the ASCII string:&lt;/span&gt;
&lt;span class="cm"&gt;  String inString = myPort.readStringUntil(&amp;#39;\n&amp;#39;);&lt;/span&gt;

&lt;span class="cm"&gt;  if (inString != null) {&lt;/span&gt;
&lt;span class="cm"&gt;    // trim off any whitespace:&lt;/span&gt;
&lt;span class="cm"&gt;    inString = trim(inString);&lt;/span&gt;
&lt;span class="cm"&gt;    // split the string on the commas and convert the&lt;/span&gt;
&lt;span class="cm"&gt;    // resulting substrings into an integer array:&lt;/span&gt;
&lt;span class="cm"&gt;    float[] colors = float(split(inString, &amp;quot;,&amp;quot;));&lt;/span&gt;
&lt;span class="cm"&gt;    // if the array has at least three elements, you know&lt;/span&gt;
&lt;span class="cm"&gt;    // you got the whole thing.  Put the numbers in the&lt;/span&gt;
&lt;span class="cm"&gt;    // color variables:&lt;/span&gt;
&lt;span class="cm"&gt;    if (colors.length &amp;gt;=3) {&lt;/span&gt;
&lt;span class="cm"&gt;      // map them to the range 0-255:&lt;/span&gt;
&lt;span class="cm"&gt;      redValue = map(colors[0], 0, 1023, 0, 255);&lt;/span&gt;
&lt;span class="cm"&gt;      greenValue = map(colors[1], 0, 1023, 0, 255);&lt;/span&gt;
&lt;span class="cm"&gt;      blueValue = map(colors[2], 0, 1023, 0, 255);&lt;/span&gt;
&lt;span class="cm"&gt;    }&lt;/span&gt;
&lt;span class="cm"&gt;  }&lt;/span&gt;
&lt;span class="cm"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Processing Code&lt;/h4&gt;
&lt;p&gt;Copy the Processing sketch from the code sample above. As you change the value of the analog sensors, the background color will change:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Processing" src="https://www.arduino.cc/en/uploads/Tutorial/virtualColorMixer-output.png" /&gt;&lt;/p&gt;
&lt;h4&gt;Video Demonstration&lt;/h4&gt;
&lt;p&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/kPKBdf-KYZU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hacker Space Tech</dc:creator><pubDate>Sat, 12 Nov 2016 00:00:00 -0600</pubDate><guid isPermaLink="false">tag:www.hackerspacetech.com,2016-11-12:virtual-color-mixer.html</guid><category>Arduino</category><category>Programming</category><category>Tutorials</category><category>Processing</category></item><item><title>Switch Case 2: A second switch-case example, showing how to take different actions based on the characters received in the serial port</title><link>http://www.hackerspacetech.com/switch-case-2-a-second-switch-case-example-showing-how-to-take-different-actions-based-on-the-characters-received-in-the-serial-port.html</link><description>&lt;p&gt;&lt;div class="jumbotron"&gt;
An if statement allows you to choose between two discrete options, TRUE or FALSE. When there are more than two options, you can use multiple if statements, or you can use the switch statement. Switch allows you to choose between several discrete options.&lt;/p&gt;
&lt;p&gt;This tutorial shows you how to use switch to turn on one of several different LEDs based on a byte of data received serially. The sketch listens for serial input, and turns on a different LED for the characters a, b, c, d, or e.&lt;/p&gt;
&lt;h4&gt;Hardware Required&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Arduino&lt;/li&gt;
&lt;li&gt;5 LEDs&lt;/li&gt;
&lt;li&gt;5 220 ohm resistors&lt;/li&gt;
&lt;li&gt;hook-up wires&lt;/li&gt;
&lt;li&gt;breadboard&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Circuit&lt;/h4&gt;
&lt;p&gt;Five LEDs are attached to digital pins 2, 3, 4, 5, and 6 in series through 220 ohm resistors.&lt;/p&gt;
&lt;p&gt;To make this sketch work, your board must be connected to your computer. In the Arduino IDE open the serial monitor and send the characters a, b, c, d, or e to lit up the corresponding LED, or anything else to switch them off.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Circuit" src="http://www.arduino.cc/en/uploads/Tutorial/switchCase2_bb.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Arduino" src="http://www.arduino.cc/en/uploads/Tutorial/SwitchCase2.png" /&gt;&lt;/p&gt;
&lt;h4&gt;Code&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;  Switch statement  with serial input&lt;/span&gt;

&lt;span class="cm"&gt; Demonstrates the use of a switch statement.  The switch&lt;/span&gt;
&lt;span class="cm"&gt; statement allows you to choose from among a set of discrete values&lt;/span&gt;
&lt;span class="cm"&gt; of a variable.  It&amp;#39;s like a series of if statements.&lt;/span&gt;

&lt;span class="cm"&gt; To see this sketch in action, open the Serial monitor and send any character.&lt;/span&gt;
&lt;span class="cm"&gt; The characters a, b, c, d, and e, will turn on LEDs.  Any other character will turn&lt;/span&gt;
&lt;span class="cm"&gt; the LEDs off.&lt;/span&gt;

&lt;span class="cm"&gt; The circuit:&lt;/span&gt;
&lt;span class="cm"&gt; * 5 LEDs attached to digital pins 2 through 6 through 220-ohm resistors&lt;/span&gt;

&lt;span class="cm"&gt; created 1 Jul 2009&lt;/span&gt;
&lt;span class="cm"&gt; by Tom Igoe&lt;/span&gt;

&lt;span class="cm"&gt;This example code is in the public domain.&lt;/span&gt;

&lt;span class="cm"&gt; http://www.arduino.cc/en/Tutorial/SwitchCase2&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

void&lt;span class="w"&gt; &lt;/span&gt;setup&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;initialize&lt;span class="w"&gt; &lt;/span&gt;serial&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;communication&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;Serial&lt;span class="o"&gt;.&lt;/span&gt;begin&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9600&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;initialize&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;LED&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;pins&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kr"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;int&lt;span class="w"&gt; &lt;/span&gt;thisPin&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;thisPin&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;thisPin&lt;span class="o"&gt;++)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;pinMode&lt;span class="o"&gt;(&lt;/span&gt;thisPin&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;OUTPUT&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

void&lt;span class="w"&gt; &lt;/span&gt;loop&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;read&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;sensor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;Serial&lt;span class="o"&gt;.&lt;/span&gt;available&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;int&lt;span class="w"&gt; &lt;/span&gt;inByte&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Serial&lt;span class="o"&gt;.&lt;/span&gt;read&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;something&lt;span class="w"&gt; &lt;/span&gt;different&lt;span class="w"&gt; &lt;/span&gt;depending&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;character&lt;span class="w"&gt; &lt;/span&gt;received&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;The&lt;span class="w"&gt; &lt;/span&gt;switch&lt;span class="w"&gt; &lt;/span&gt;statement&lt;span class="w"&gt; &lt;/span&gt;expects&lt;span class="w"&gt; &lt;/span&gt;single&lt;span class="w"&gt; &lt;/span&gt;number&lt;span class="w"&gt; &lt;/span&gt;values&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;each&lt;span class="w"&gt; &lt;/span&gt;case&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;in&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;exmaple&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;though&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;you&lt;span class="s"&gt;&amp;#39;re using single quotes to tell&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;controller&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;ASCII&lt;span class="w"&gt; &lt;/span&gt;value&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;character&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kr"&gt;For&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;example&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;97&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;98&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;so&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;forth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;switch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;inByte&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;case&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;digitalWrite&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;HIGH&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;break&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;case&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;digitalWrite&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;HIGH&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;break&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;case&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;digitalWrite&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;HIGH&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;break&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;case&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;digitalWrite&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;HIGH&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;break&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;case&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;digitalWrite&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;HIGH&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;break&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;turn&lt;span class="w"&gt; &lt;/span&gt;all&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;LEDs&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;off&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="kr"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;int&lt;span class="w"&gt; &lt;/span&gt;thisPin&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;thisPin&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;thisPin&lt;span class="o"&gt;++)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;digitalWrite&lt;span class="o"&gt;(&lt;/span&gt;thisPin&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;LOW&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hacker Space Tech</dc:creator><pubDate>Wed, 09 Nov 2016 00:00:00 -0600</pubDate><guid isPermaLink="false">tag:www.hackerspacetech.com,2016-11-09:switch-case-2-a-second-switch-case-example-showing-how-to-take-different-actions-based-on-the-characters-received-in-the-serial-port.html</guid><category>Arduino</category><category>Programming</category><category>Tutorials</category></item></channel></rss>